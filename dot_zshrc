# zim setup
ZIM_CONFIG_FILE=~/.zimrc
ZIM_HOME=~/.zim
## Download zimfw plugin manager if missing.
if [[ ! -e ${ZIM_HOME}/zimfw.zsh ]]; then
  curl -fsSL --create-dirs -o ${ZIM_HOME}/zimfw.zsh \
      https://github.com/zimfw/zimfw/releases/latest/download/zimfw.zsh
fi
## Install missing modules and update ${ZIM_HOME}/init.zsh if missing or outdated
if [[ ! ${ZIM_HOME}/init.zsh -nt ${ZIM_CONFIG_FILE:-${ZDOTDIR:-${HOME}}/.zimrc} ]]; then
  source ${ZIM_HOME}/zimfw.zsh init
fi
## Initialize modules
source ${ZIM_HOME}/init.zsh

# Aliases
alias aui="sudo apt-get update; sudo apt-get upgrade; sudo apt-get dist-upgrade"
alias cls="clear"

if [[ -d /home/linuxbrew ]] && ([[ -f /etc/lsb-release ]] || [[ -f /etc/os-release ]]); then
	export PATH="/home/linuxbrew/.linuxbrew/bin:$PATH"
	export MANPATH="/home/linuxbrew/.linuxbrew/share/man:$MANPATH"
	export INFOPATH="/home/linuxbrew/.linuxbrew/share/info:$INFOPATH"
	export PATH="/home/linuxbrew/.linuxbrew/opt/python/libexec/bin:$PATH"
	export PATH=$PATH:/home/linuxbrew/.linuxbrew/opt/go/libexec/bin
	export PATH="/home/linuxbrew/.linuxbrew/sbin:$PATH"
	export PATH"=/home/linuxbrew/.linuxbrew/Homebrew/Library/Homebrew/vendor/portable-ruby/current/bin:$PATH"
fi

# theme config
MNML_RPROMPT=('mnml_cwd 2' mnml_git)

# If using Microsoft Terminal, default to ~ rather than /mnt/c/Users/[username]
# and also alias clip.exe to clip
## WSL1
if [[ "$(uname -a)" == *"Microsoft"* ]]; then
	cd ~
	alias clip="clip.exe"
fi
## WSL2
if [[ "$(uname -a)" == *"microsoft"* ]]; then
	cd ~
	alias clip="clip.exe"
fi

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# fzf sourcing
## setup
if [[ ! "$PATH" == *${HOME}/.fzf/bin* ]]; then
	export PATH="${PATH:+${PATH}:}${HOME}/.fzf/bin"
fi
## autocompletion
[[ $- == *i* ]] && source "~/.fzf/shell/completion.zsh" 2> /dev/null
## keybindings
source "${HOME}/.fzf/shell/key-bindings.zsh"

# personal bin folder
if [[ ! "$PATH" == *${HOME}/bin* ]]; then
	export PATH="${PATH:+${PATH}:}${HOME}/bin"
fi
# similar to the above but to satisfy a particular install
if [[ ! "$PATH" == *${HOME}/.local/bin* ]]; then
	export PATH="${PATH:+${PATH}:}${HOME}/.local/bin"
fi
# theming for sharkdp/bat
export BAT_THEME="Solarized (dark)"
# if neovim is present, make that the editor; if not, vim
if [[ `which nvim &>/dev/null && echo $?` == 0 ]]; then
	export EDITOR="nvim"
	export VISUAL="$(which nvim)"
else
	export EDITOR="vim"
fi

# path addition for corbindavenport/nexus-tools
if [[ -d $HOME/.nexustools ]] && [[ ! "$PATH" == *${HOME}/.nexustools* ]]; then
	export PATH="${PATH:+${PATH}:}${HOME}/.nexustools"
fi

# annoying workaround for macFUSE issues on macOS
if [[ $(uname) == "Darwin" ]]; then
	alias macfuse_reset="sudo kextunload -b io.macfuse.filesystems.macfuse"
fi
# detect WSL and if used, add some aliases to make the below easier
## WSL1
if [[ "$(uname -a)" == *"Microsoft"* ]]; then
	alias ssh="ssh.exe"
	alias ssh-add="ssh-add.exe"
	alias op="op.exe"
fi
## WSL2
if [[ "$(uname -a)" == *"microsoft"* ]]; then
	alias ssh="ssh.exe"
	alias ssh-add="ssh-add.exe"
	alias op="op.exe"
fi

# if 1Password CLI is present, add completions
if [[ `which op &>/dev/null && echo $?` == 0 ]]; then
	eval "$(op completion zsh)"; compdef _op op
fi

# fix homebrew version issues on macOS?
if [ -d "/opt/homebrew" ]; then
	alias vim="/opt/homebrew/bin/vim"
fi

# if cantino/mcfly is present, initialize it
if [[ `which mcfly &>/dev/null && echo $?` == 0 ]]; then
    eval "$(mcfly init zsh)"
fi

# if on macOS, create some aliases to ease starting and exiting GlobalProtect
if [[ $(uname) == "Darwin" && `ls -1 /Library/LaunchAgents/com.paloaltonetworks.gp.pangp* 2>/dev/null | wc -l ` -gt 0 ]]; then
    alias pangpon="launchctl load /Library/LaunchAgents/com.paloaltonetworks.gp.pangp*"
    alias pangpoff="launchctl unload /Library/LaunchAgents/com.paloaltonetworks.gp.pangp*"
fi

# if on WSL, determine winhome; if a certain tool isn't available, prompt to install
#{{- if eq .chezmoi.os "linux" -}}
# {{- if (and (.chezmoi.kernel.osrelease | lower | contains "microsoft") (lookPath "wslvar")) -}}
if [[ "$(uname -a)" == *"microsoft"* || "$(uname -a)" == *"Microsoft"* && `which wslvar &>/dev/null && echo $?` == 0 ]]; then
    winhome="$(wslpath "$(wslvar USERPROFILE 2>/dev/null)")"
    export winhome
elif [[ "$(uname -a)" == *"microsoft"* || "$(uname -a)" == *"Microsoft"* && `which wslvar &>/dev/null && echo $?` -ne 0 ]]; then
    echo "looks like you don't have wslu yet. you should probably install that"
fi

# if terraform is present, enable its provided completion
if [[ `which terraform &>/dev/null && echo $?` == 0 ]]; then
    autoload -U +X bashcompinit && bashcompinit
    complete -o nospace -C $(which terraform) terraform
fi

# if opentofu is present, enable its provided completion
if [[ `which tofu &>/dev/null && echo $?` == 0 ]]; then
    complete -o nospace -C $(which tofu) tofu
fi
